{
    "user_inputs": [
        {
            "task_id": 0,
            "user_input": 1
        },
        {
            "task_id": 1,
            "user_input": [0,3]
        },
        {
            "task_id": 2,
            "user_input": "<some-state-representation>"
        },
        {
            "task_id": 3,
            "user_input": [
                {
                    "id": "DATA.IN.TREE_SEARCH",
                    "data": {
                        "name": "tree_search.py",
                        "content": "import queue\ndef mnc_tree_search(m, c):\n    '''\n    Solution should be the action taken from the root node (initial state) to\n    the leaf node (goal state) in the search tree.\n    Parameters\n    ----------\n    m: no. of missionaries\n    c: no. of cannibals\n    Returns\n    ----------\n    Returns the solution to the problem as a tuple of steps. Each step is a tuple of two numbers x and y, indicating the number of missionaries and cannibals on the boat respectively as the boat moves from one side of the river to another. If there is no solution, return False.\n    '''\n        # State:\n    # (\n    #   no. missionaries on left side,\n    #   no. cannibals on left side,\n    #   is boat on left side,\n    #   actions\n    # )\n    initial_state = (0, 0, False, ())\n    q = queue.Queue()\n    q.put(initial_state)\n    while not q.empty():\n        l_m, l_c, is_boat_left, prev_actions = q.get()\n        r_m, r_c, is_boat_right = m - l_m, c - l_c, not is_boat_left\n        l_delta_multipler = -1 if is_boat_left else 1\n        r_delta_multipler = -1 if is_boat_right else 1\n        actions = ((2, 0), (1, 0), (1, 1), (0, 1), (0, 2))\n        for delta_m, delta_c in actions:\n            next_l_m, next_l_c = (\n                l_m + (delta_m * l_delta_multipler),\n                l_c + (delta_c * l_delta_multipler),\n            )\n            next_r_m, next_r_c = (\n                r_m + (delta_m * r_delta_multipler),\n                r_c + (delta_c * r_delta_multipler),\n            )\n            next_state = (\n                next_l_m,\n                next_l_c,\n                not is_boat_left,\n                prev_actions + ((delta_m, delta_c),),\n            )\n            if next_state[:3] == (m, c, True):\n                # reached target state\n                return next_state[3]\n            if next_l_m > m or next_l_m < 0 or next_l_c > c or next_l_c < 0:\n                # check for representation invariant\n                continue\n            if (next_l_c > next_l_m and next_l_m > 0) or (\n                next_r_c > next_r_m and next_r_m > 0\n            ):\n                # check for invalid/lose state\n                continue\n            q.put(next_state)\n    return False"
                    }
                }
            ]
        }
    ],
    "expected_answers": [
        {
            "task_id": 0,
            "expected_answer": 1
        },
        {
            "task_id": 1,
            "expected_answer": [0,3]
        }
    ]
}