"""Add contest tables

Revision ID: cc6459c9196b
Revises: b3b3c3bae3f3
Create Date: 2024-11-08 00:19:02.273820

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cc6459c9196b"
down_revision: str | None = "b3b3c3bae3f3"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "definition",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "submission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("definition_id", sa.Integer(), nullable=False),
        sa.Column(
            "status", postgresql.ENUM("Pending", "Ok", name="submissionstatus"), nullable=False
        ),
        sa.Column(
            "submitted_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("other_fields", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["definition_id"],
            ["definition.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "task",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            postgresql.ENUM(
                "MULTIPLE_CHOICE",
                "MULTIPLE_RESPONSE",
                "SHORT_ANSWER",
                "PROGRAMMING",
                name="tasktype",
            ),
            nullable=False,
        ),
        sa.Column("autograde", sa.Boolean(), nullable=False),
        sa.Column("other_fields", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("definition_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["definition_id"],
            ["definition.id"],
        ),
        sa.PrimaryKeyConstraint("id", "definition_id"),
    )
    op.create_table(
        "task_result",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("submission_id", sa.Integer(), nullable=False),
        sa.Column("definition_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column(
            "started_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("completed_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("job_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("SUCCESS", "PENDING", "SKIPPED", "FAILED", name="taskevalstatus"),
            nullable=False,
        ),
        sa.Column("result", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["definition_id", "task_id"],
            ["task.definition_id", "task.id"],
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("job_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("task_result")
    op.drop_table("task")
    op.drop_table("submission")
    op.drop_table("definition")
    # ### end Alembic commands ###

    # NOTE: Manually drop the ENUM types since Alembic does not generate the drop commands
    op.execute("DROP TYPE submissionstatus;")
    op.execute("DROP TYPE taskevalstatus;")
    op.execute("DROP TYPE tasktype;")
